1	 \hspace*{5mm}ï»¿import locale\\
2	 \hspace*{5mm}import sys\\
3	 \hspace*{5mm}import requests\\
4	 \hspace*{5mm}import validators\\
5	 \hspace*{5mm}from urllib.parse import urlparse\\
6	 \hspace*{5mm}from bs4 import BeautifulSoup\\
7	 \hspace*{5mm}from time import strftime, localtime, time\\
8	 \hspace*{5mm}\\
9	 \hspace*{5mm}"""\\
10	 \hspace*{5mm}This Python program\\
11	 \hspace*{5mm}  \hspace*{2.5mm}1. takes as a command line argument a web page\\
12	 \hspace*{5mm}  \hspace*{2.5mm}2. extracts all the links from the page\\
13	 \hspace*{5mm}  \hspace*{2.5mm}3. lists all the links that result in PDF files, and prints out\\
14	 \hspace*{5mm}     \hspace*{6.25mm}the bytes for each of the links.  \hspace*{2.5mm}(note: be sure to follow\\
15	 \hspace*{5mm}     \hspace*{6.25mm}all the redirects until the link terminates with a "200 OK".)\\
16	 \hspace*{5mm}"""\\
17	 \hspace*{5mm}\_\_author\_\_ = 'Plinio H. Vargas'\\
18	 \hspace*{5mm}\_\_date\_\_ = 'Thu,  \hspace*{2.5mm}Jan 21, 2016 at 22:22:11'\\
19	 \hspace*{5mm}\_\_email\_\_ = 'pvargas@cs.odu.edu'\\
20	 \hspace*{5mm}\\
21	 \hspace*{5mm}\\
22	 \hspace*{5mm}def main(url):\\
23	 \hspace*{5mm}    \hspace*{5mm}locale.setlocale(locale.LC\_ALL, 'en\_US.utf8')\\
24	 \hspace*{5mm}    \hspace*{5mm}\# record running time\\
25	 \hspace*{5mm}    \hspace*{5mm}start = time()\\
26	 \hspace*{5mm}    \hspace*{5mm}print('Starting Time: \%s' \% strftime("\%a,  \hspace*{2.5mm}\%b \%d, \%Y at \%H:\%M:\%S", localtime()))\\
27	 \hspace*{5mm}    \hspace*{5mm}print('Extracting pdf links from: \%s$\backslash$n' \% url)\\
28	 \hspace*{5mm}\\
29	 \hspace*{5mm}    \hspace*{5mm}\# get uri status\\
30	 \hspace*{5mm}    \hspace*{5mm}if requests.get(url).status\_code $!$= 200:\\
31	 \hspace*{5mm}        \hspace*{10mm}print('$\backslash$n$\backslash$nURI is not available from SERVER. Verify URI.$\backslash$n')\\
32	 \hspace*{5mm}        \hspace*{10mm}return\\
33	 \hspace*{5mm}\\
34	 \hspace*{5mm}    \hspace*{5mm}\# get source from URI\\
35	 \hspace*{5mm}    \hspace*{5mm}page = requests.get(url).text\\
36	 \hspace*{5mm}\\
37	 \hspace*{5mm}    \hspace*{5mm}\# get parse hostname from URI\\
38	 \hspace*{5mm}    \hspace*{5mm}url = 'http://' + urlparse(url).netloc\\
39	 \hspace*{5mm}\\
40	 \hspace*{5mm}    \hspace*{5mm}\# create BeautifulSoup Object\\
41	 \hspace*{5mm}    \hspace*{5mm}soup = BeautifulSoup(page, 'html.parser')\\
42	 \hspace*{5mm}\\
43	 \hspace*{5mm}    \hspace*{5mm}\# place source link into list\\
44	 \hspace*{5mm}    \hspace*{5mm}all\_links = []\\
45	 \hspace*{5mm}    \hspace*{5mm}for link in soup.find\_all('a'):\\
46	 \hspace*{5mm}        \hspace*{10mm}uri = link.get('href')\\
47	 \hspace*{5mm}        \hspace*{10mm}\# include hostname if url is provided by reference\\
48	 \hspace*{5mm}        \hspace*{10mm}if ((len(uri) $>$ 6 and uri[:7].lower() $!$= 'http://') or len(uri) $<$ 7) and uri[:8].lower() $!$= 'https://':\\
49	 \hspace*{5mm}            \hspace*{15mm}if uri[:2] == '//':    \hspace*{5mm}\# if url has double backslash then url is not provided by reference\\
50	 \hspace*{5mm}                \hspace*{20mm}uri = 'http:' + uri\\
51	 \hspace*{5mm}            \hspace*{15mm}elif uri[0] $!$= '/':    \hspace*{5mm}\# include backslash if it was not include by reference\\
52	 \hspace*{5mm}                \hspace*{20mm}uri = url + '/' + uri\\
53	 \hspace*{5mm}            \hspace*{15mm}else:\\
54	 \hspace*{5mm}                \hspace*{20mm}uri = url + uri\\
55	 \hspace*{5mm}\\
56	 \hspace*{5mm}        \hspace*{10mm}\# for debugging\\
57	 \hspace*{5mm}        \hspace*{10mm}\# print(uri)\\
58	 \hspace*{5mm}\\
59	 \hspace*{5mm}        \hspace*{10mm}try:\\
60	 \hspace*{5mm}            \hspace*{15mm}r = requests.get(uri)\\
61	 \hspace*{5mm}            \hspace*{15mm}if 'Content-Type' in r.headers and r.headers['Content-Type'] == 'application/pdf':\\
62	 \hspace*{5mm}                \hspace*{20mm}if r.status\_code == 200:\\
63	 \hspace*{5mm}                    \hspace*{25mm}\# ensure server provides Content-Length\\
64	 \hspace*{5mm}                    \hspace*{25mm}try:\\
65	 \hspace*{5mm}                        \hspace*{30mm}all\_links.append((uri, r.headers['Content-Length']))\\
66	 \hspace*{5mm}                    \hspace*{25mm}except KeyError:\\
67	 \hspace*{5mm}                        \hspace*{30mm}\# make Content-Length unknown\\
68	 \hspace*{5mm}                        \hspace*{30mm}r.headers['Content-Length'] = '???'\\
69	 \hspace*{5mm}                        \hspace*{30mm}all\_links.append((uri, r.headers['Content-Length']))\\
70	 \hspace*{5mm}        \hspace*{10mm}except requests.exceptions.SSLError:\\
71	 \hspace*{5mm}            \hspace*{15mm}print('Couldn$\backslash$'t open: \%s. URL requires authentication.' \% uri)\\
72	 \hspace*{5mm}        \hspace*{10mm}except requests.exceptions.ConnectionError:\\
73	 \hspace*{5mm}            \hspace*{15mm}print('Couldn$\backslash$'t open: \%s. Connection refused.' \% uri)\\
74	 \hspace*{5mm}\\
75	 \hspace*{5mm}    \hspace*{5mm}print('$\backslash$n$\backslash$nList of all PDFs Links:')\\
76	 \hspace*{5mm}    \hspace*{5mm}print('-' * len('List of all PDFs Links'))\\
77	 \hspace*{5mm}\\
78	 \hspace*{5mm}    \hspace*{5mm}pdf\_links = set(all\_links)\\
79	 \hspace*{5mm}    \hspace*{5mm}all\_links = list(pdf\_links)\\
80	 \hspace*{5mm}    \hspace*{5mm}if len(all\_links) $>$ 0:\\
81	 \hspace*{5mm}        \hspace*{10mm}for i in range(len(pdf\_links)):\\
82	 \hspace*{5mm}            \hspace*{15mm}if all\_links[i][1] == '???':\\
83	 \hspace*{5mm}                \hspace*{20mm}\# don't format Content-Lenght\\
84	 \hspace*{5mm}                \hspace*{20mm}print('\%s, File Size: \%s bytes' \% (all\_links[i][0], all\_links[i][1]))\\
85	 \hspace*{5mm}            \hspace*{15mm}else:\\
86	 \hspace*{5mm}                \hspace*{20mm}print('\%s, File Size: \%s bytes' \% (all\_links[i][0],\\
87	 \hspace*{5mm}                                                  \hspace*{62.5mm}locale.format("\%d", int(all\_links[i][1]), grouping=True)))\\
88	 \hspace*{5mm}    \hspace*{5mm}else:\\
89	 \hspace*{5mm}        \hspace*{10mm}print('No PDFs links for above URI.')\\
90	 \hspace*{5mm}\\
91	 \hspace*{5mm}    \hspace*{5mm}print('$\backslash$nEnd Time:  \hspace*{2.5mm}\%s' \% strftime("\%a,  \hspace*{2.5mm}\%b \%d, \%Y at \%H:\%M:\%S", localtime()))\\
92	 \hspace*{5mm}    \hspace*{5mm}print('Execution Time: \%.2f seconds' \% (time()-start))\\
93	 \hspace*{5mm}    \hspace*{5mm}return\\
94	 \hspace*{5mm}\\
95	 \hspace*{5mm}if \_\_name\_\_ == '\_\_main\_\_':\\
96	 \hspace*{5mm}    \hspace*{5mm}\# checks for argument\\
97	 \hspace*{5mm}    \hspace*{5mm}if len(sys.argv) $!$= 2:\\
98	 \hspace*{5mm}        \hspace*{10mm}print('Please, provide url$\backslash$nUsage: python3 a1.py [url]')\\
99	 \hspace*{5mm}        \hspace*{10mm}sys.exit(-1)\\
100	 \hspace*{5mm}    \hspace*{5mm}if not validators.url(sys.argv[1]):\\
101	 \hspace*{5mm}        \hspace*{10mm}print('URL is invalid, please correct url and try again')\\
102	 \hspace*{5mm}        \hspace*{10mm}sys.exit(1)\\
103	 \hspace*{5mm}\\
104	 \hspace*{5mm}    \hspace*{5mm}\# call main\\
105	 \hspace*{5mm}    \hspace*{5mm}main(sys.argv[1])\\
106	 \hspace*{5mm}\\
107	 \hspace*{5mm}    \hspace*{5mm}sys.exit(0)\\
